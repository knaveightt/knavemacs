#+TITLE: Knavemacs Emacs Configuration
#+AUTHOR: John Osinski
#+EMAIL: johnosinski80@gmail.com

:  ___  __    ________   ________  ___      ___ _______   _____ ______   ________  ________  ________
: |\  \|\  \ |\   ___  \|\   __  \|\  \    /  /|\  ___ \ |\   _ \  _   \|\   __  \|\   ____\|\   ____\
: \ \  \/  /|\ \  \\ \  \ \  \|\  \ \  \  /  / | \   __/|\ \  \\\__\ \  \ \  \|\  \ \  \___|\ \  \___|
:  \ \   ___  \ \  \\ \  \ \   __  \ \  \/  / / \ \  \_|/_\ \  \\|__| \  \ \   __  \ \  \    \ \_____  \
:   \ \  \\ \  \ \  \\ \  \ \  \ \  \ \    / /   \ \  \_|\ \ \  \    \ \  \ \  \ \  \ \  \____\|____|\  \
:    \ \__\\ \__\ \__\\ \__\ \__\ \__\ \__/ /     \ \_______\ \__\    \ \__\ \__\ \__\ \_______\____\_\  \
:     \|__| \|__|\|__| \|__|\|__|\|__|\|__|/       \|_______|\|__|     \|__|\|__|\|__|\|_______|\_________\
:                                                                                              \|_________|

* What is this?
This is my [[https://www.gnu.org/software/emacs/][GNU Emacs]] configuration setup in an org file. To load this config
in your own emacs instance, you can add the following lines to your ~.emacs~
or ~.config/init.el~ file (the below is assuming that you are putting the emacs
init file and this org file in the ~/.config/emacs folder):

: (require 'org)
: (require 'ob-tangle)
: (org-babel-load-file "~/.config/emacs/config.org")

Throughout my configuration, I may have settings that pertain to either
Windows or Linux since I use this config file across different OS types. If
there are ever any dependencies for either platform, they can be looked up
by searching for ~;; DEP:~ in this file.

Credit should be given where credit is due. Much of this config is heavily
inspired (and sometimes copied verbatim) from System Crafter's *Emacs From Scratch*
series on youtube. Definitely a must watch.

* Full Emacs Configuration
The following sections both describe and provide the elisp used to configure
various aspects of my emacs instance.

** Basic Configuration
*** Garbage Collection
I've read a lot about different ways to approach this. I'm going off a stack exchange
post that [[https://emacs.stackexchange.com/question/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga][you can read here]] with some suggestions on how to set this. I'm using a
single command for now and we'll see how that goes.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 1024 1024 100)) ;; about 100MB
#+END_SRC

*** Basic Visual Changes
Vanilla, unconfigured emacs starts with a tool bar, scroll bar, menus, and
other visual elements at play that I disable right from the get-go.

#+BEGIN_SRC emacs-lisp 
  ;; setting some default settings to start with a minimal Emacs startup
  (setq inhibit-startup-message t) ;; no more start up message
  (setq visible-bell t)            ;; stop beeping
  (scroll-bar-mode -1)             ;; disable scroll bars
  (tool-bar-mode -1)               ;; disable tool bar
  (tooltip-mode -1)                ;; disable tooltips
  (set-fringe-mode 10)             ;; sets fringe size
  (menu-bar-mode -1)               ;; disable menu bar
#+END_SRC

*** Enable Line Numbers
I like to use line numbers on the left-hand side, and like to have relative
line numbers shown so I know how far apart various lines are from my current
cursor location.

#+BEGIN_SRC emacs-lisp
  ;; update the UI with additional basic settings
  (setq display-line-numbers-type 'relative); enable relative line numbers
  (column-number-mode)                 ; show column number in mode line
  (global-display-line-numbers-mode t) ; enable line numbers globally
  (dolist (mode '(org-mode-hook        ; define modes that we don't want to see line numbers on
		term-mode-hook
		eshell-mode-hook
		which-key-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

*** Font Configuration
On my linux workspace, I like to set the font to my linking. Note that this
assumes the font is already present on the workspace.

#+BEGIN_SRC emacs-lisp
  ;; set default font settings for my favorite linux font if not on windows
  ;; DEP: requires "Inconsolata Nerd Font" installed on linux.
  (if (not(eq system-type 'windows-nt ))
      (set-face-attribute `default nil :font "Inconsolata Nerd Font" :height 140))
#+END_SRC

*** Backup File Rules
It is worth nothing that the emacs manual has a good description of backups by
copying vs renaming. Right now I am using the other mode (copy on backing up),
so that I don't start causing issues with system links, I might need to change to
the other method if it's too slow. In any case, I define a specific directory
for my backup files.

#+BEGIN_SRC emacs-lisp
  ;; set a default location for backup files, instead of the files being created
  ;; right next to the original sources
  (if (not (file-exists-p "~/.local/share/emacs-saves"))
      (make-directory "~/.local/share/emacs-saves" t))
  (setq backup-directory-alist '(("." . "~/.local/share/emacs-saves")))
  (setq make-backup-files t
	backup-by-copying t
	version-control t
	delete-old-version t
	delete-by-moving-to-trash t
	kept-old-versions 6
	kept-new-versions 6
	auto-save-default t
	auto-save-timeout 20
	auto-save-interval 200
	)
#+END_SRC

** Package Management and Setup
*** Initialize Package Sources
I use the following three sources for downloadable emacs packages:
 - elpa, the GNU ELPA package archive
 - melpa, the "big one"
 - org, to get the latest version of org-mode functionality

#+BEGIN_SRC emacs-lisp
  ;; initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

*** Setup of use-package
I use use-package as my main package manager for downloading and configuring
external emacs packages. I set use-package-always-ensure because I want all
packages defined in this config file to be installed automatically if not
already present on my system.

#+BEGIN_SRC emacs-lisp
  ;; SETUP: use-package
  ;; PURPOSE: for easy installation of other packages
  ;; initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Completion, Hints, Help Framework
*** Ivy
I use the Ivy ecosystem for my general completion mechanism in Emacs. Other
completion engines to exist, like helm. Just a tip for Ivy, I can use
~M-o~ while in an Ivy list can provide some additonal functions on list entries!

#+BEGIN_SRC emacs-lisp
  ;; SETUP: ivy
  ;; PURPOSE: completion framework for emacs
  (use-package ivy
    :diminish ;; keep out of mode line
    :bind (("C-s" . swiper)
	 :map ivy-minibuffer-map
	 ("TAB" . ivy-alt-done)
	 ("C-l" . ivy-alt-done)
	 ("C-j" . ivy-next-line)
	 ("C-k" . ivy-previous-line)
	 :map ivy-switch-buffer-map
	 ("C-k" . ivy-previous-line)
	 ("C-l" . ivy-done)
	 ("C-d" . ivy-switch-buffer-kill)
	 :map ivy-reverse-i-search-map
	 ("C-k" . ivy-previous-line)
	 ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
#+END_SRC

*** Counsel
#+BEGIN_SRC emacs-lisp
  ;; SETUP: counsel
  ;; PURPOSE: provide versions of common emacs commands using Ivy
  (use-package counsel
    :diminish
    :config
    (counsel-mode 1))
#+END_SRC

*** Which-key
#+BEGIN_SRC emacs-lisp
  ;; SETUP: which-key
  ;; PURPOSE: provides assistance in showing what key permutations/options exist while entering commands
  (use-package which-key
    :init (which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 0.9))
#+END_SRC

*** Ivy-rich
#+BEGIN_SRC emacs-lisp
  ;; SETUP: ivy-rich
  ;; PURPOSE: provides assistance in showing details for commands and completions from ivy and counsel
  (use-package ivy-rich
    :init (ivy-rich-mode 1))
#+END_SRC

*** Helpful
#+BEGIN_SRC emacs-lisp
  ;; SETUP: helpful
  ;; PURPOSE: provides alternative, deep detail ontop of the existing help documentation in emacs
  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+END_SRC

** Org-Mode Configuration
*** Org (general config)
#+BEGIN_SRC emacs-lisp
  ;; PURPOSE: this manages my getting things done workflow during work
  (use-package org
    :bind
    ("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c c" . org-capture)
    :config
    (setq org-ellipsis " â–¾"
	  org-hide-emphasis-markers t)
    (setq org-agenda-files (list "~/.org"))
    (setq org-refile-targets
	  '((nil :maxlevel . 1)
	    (org-agenda-files :maxlevel . 2)))
    (setq org-todo-keywords
	  '((sequence "TODO(t)" "NEXT(n)" "WAIT(w)" "GAVE(v)" "MEET(m)" "|" "DONE(d)" "CANCELED(c)")))
    (setq org-todo-keyword-faces
	  `(("TODO" . org-warning) ("NEXT" . "green") ("WAIT" . "yellow") ("GAVE" . "orange") ("MEET" . "yellow")
	    ("DONE" . "blue") ("CANCELED" . "purple")))

    ;; custom agenda views
    (setq org-agenda-custom-commands
	  '(("d" "Work-Week Dashboard"
	     ((agenda "" ((org-deadline-warning-days 7)))
	      (todo "NEXT"
		    ((org-agenda-overriding-header "Actions To Be Taken Next")))
	      (todo "WAIT"
		    ((org-agenda-overriding-header "Waiting before continuing TODO")))
	      (todo "GAVE"
		    ((org-agenda-overriding-header "TODOs Being Actioned By Someone Else")))))))

    ;; capture templates
    (setq org-capture-templates
	  '(("m" "Meeting Notes" entry (file+olp "~/.org/unfiled.org" "Meetings")
	     "* %t %? :unfiled:" :empty-lines 1)

	    ("j" "Journal Notes" entry (file+old+datetree "~/.org/unfiled.org" "Journal Notes")
	     "* %U %? :unfiled:\n %i" :empty-lines 1)

	    ("t" "Capture Todo" entry (file+olp "~/.org/unfiled.org" "Todos")
	     "* TODO %? :unfiled:\n %i" :empty-lines 1)
	    ))
    )
#+END_SRC

*** Org Bullets
#+BEGIN_SRC emacs-lisp
  ;; SETUP: org-bullets
  ;; PURPOSE: nicer bullets when working in org files
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Pretty Hyphens
This is done to transform dash hyphens into dots.
#+BEGIN_SRC emacs-lisp
  ;; make hyphens dots
  ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "â€¢"))))))
#+END_SRC

** Visual Theme and Aesthetic
*** all-the-icons
#+BEGIN_SRC emacs-lisp
  ;; SETUP: all-the-icons
  ;; PURPOSE: provide nerdfont-like icons for graphical elements (like doom-modeline)
  ;; DEP: must run all-the-icons-install-fonts to install the fonts to the local system.
  ;;       on Windows, double-click each downloaded font file and click install.
  ;;       The below use-package form should automatically 
  (use-package all-the-icons
    :if (display-graphic-p)
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))
#+END_SRC

*** all-the-icons-dired
#+BEGIN_SRC emacs-lisp
  ;; SETUP: all-the-icons-dired
  ;; PURPOSE: provides nerdfont-like icons specifically for dired buffers
  (use-package all-the-icons-dired
    :if (display-graphic-p)
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

*** Doom Theme(s)
#+BEGIN_SRC emacs-lisp
  ;; SETUP: doom-themes
  ;; PURPOSE: provide newer aesthetic themes outside the normal emacs defaults
  (use-package doom-themes
    :config
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
	  doom-themes-enable-italic t) ; if nil, italic is universally disabled
    (if (not(eq system-type 'windows-nt )) (load-theme 'doom-sourcerer t))
    (if (eq system-type 'windows-nt) (load-theme 'doom-opera-light t)))
#+END_SRC

*** Doom Modeline
#+BEGIN_SRC emacs-lisp
  ;; SETUP: doom-modeline
  ;; PURPOSE: provide an aesthetic, minimal mode line for emacs
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    ;; :custom ((doom-modeline-height 15))
    )
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  ;; SETUP: rainbow-delimiters
  ;; PURPOSE: make apparent the nested parenthesis in program code like Elisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

** Project and Version Control
*** Projectile
A nice thing about projectile is I can set directory (project) specific variables, including what
command runs when I "run" the project. Note that having ripgrep installed makes seach pretty
excellent across project files.

#+BEGIN_SRC emacs-lisp
  ;; SETUP: projectile
  ;; PURPOSE: project discrovey system and framework for emacs
  ;; DEP: having ripgrep installed will allow me to search better in projects
  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    )

  ;; SETUP: counsel-projectile
  ;; PURPOSE: counsel UI and further IVY integration to projectile
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :init
    (if (eq system-type 'windows-nt) (setq exec-path (append exec-path '("C:/Users/josinski/auxiliary/other/lsys/cmder/vendor/git-for-windows/bin"))))
    )
#+END_SRC

** Key-Bind Modifications
*** Meow
I use [[https://github.com/meow-edit/meow][meow]] as my modal editing system, and it is amazing!
I use ~<~ and ~>~ to navigate up and down screenfulls of text,
as well as ~N~ and ~M~ to go to the true beginning / end of a line. I can use
~SPC-?~ to get a good cheatsheet of what meow keys exist. I can always use
~C-h k~ as well to check a specific key, or launch ~meow-tutor~ for a refresher.
#+BEGIN_SRC emacs-lisp
  ;; SETUP: meow
  ;; PURPOSE: more native modal editing mode for Emacs
  (use-package meow
    :diminish
    :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("0" . meow-expand-0)
     '("9" . meow-expand-9)
     '("8" . meow-expand-8)
     '("7" . meow-expand-7)
     '("6" . meow-expand-6)
     '("5" . meow-expand-5)
     '("4" . meow-expand-4)
     '("3" . meow-expand-3)
     '("2" . meow-expand-2)
     '("1" . meow-expand-1)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . meow-pop-selection)
     '("'" . repeat)
     '("<escape>" . ignore)
     ;; deviating from the suggested map to allow easy scrolling of screens
     ;; as well as getting to true beginning / ends of lines
     '("<" . scroll-down-command)
     '(">" . scroll-up-command)
     '("N" . move-beginning-of-line)
     '("M" . move-end-of-line)
     ))

  (meow-setup)
  (meow-global-mode 1)
    )
#+END_SRC

*** Hydra
#+BEGIN_SRC emacs-lisp
  ;; SETUP: hydra
  ;; PURPOSE: tie related/successive commands together to provide family modes of key bindings
  (use-package hydra)
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
  (defhydra hydra-window-resize (:timeout 4)
    "resize split windows"
    ("j" evil-window-increase-height "inc-height")
    ("k" evil-window-decrease-height "dec-height")
    ("h" evil-window-decrease-width "dec-width")
    ("l" evil-window-increase-width "inc-width")
    ("f" nil "finished" :ext t))
#+END_SRC

*** General
I use general to setup some additional keybinds based on a global leader. Like my own keypad versus
the space key used for meow.
#+BEGIN_SRC emacs-lisp
  ;; SETUP: general
  ;; PURPOSE: provide convenient and consistent keymap definitions, including with leader keys
  (use-package general
    :config
    (general-create-definer knavemacs/leader-keys
			    :keymaps 'global
			    :prefix "C-c p")
    (knavemacs/leader-keys
     "p"  '(projectile-command-map :which-key "projectile")
      
     "o"  '(:ignore t :which-key "org-mode")
     "oa" '(org-agenda :which-key "org-agenda")
     "oc" '(org-capture :which-key "org-capture")
     "ol" '(org-store-link :which-key "org-store-link")

     "s"  '(:ignore t :which-key "scale/size")
     "st" '(hydra-text-scale/body :which-key "scale text")
     "sw" '(hydra-window-resize/body :which-key "resize window")))
#+END_SRC

