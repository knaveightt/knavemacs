#+TITLE: Knavemacs Emacs Configuration
#+AUTHOR: John Osinski
#+EMAIL: johnosinski80@gmail.com

:  ___  __    ________   ________  ___      ___ _______   _____ ______   ________  ________  ________
: |\  \|\  \ |\   ___  \|\   __  \|\  \    /  /|\  ___ \ |\   _ \  _   \|\   __  \|\   ____\|\   ____\
: \ \  \/  /|\ \  \\ \  \ \  \|\  \ \  \  /  / | \   __/|\ \  \\\__\ \  \ \  \|\  \ \  \___|\ \  \___|
:  \ \   ___  \ \  \\ \  \ \   __  \ \  \/  / / \ \  \_|/_\ \  \\|__| \  \ \   __  \ \  \    \ \_____  \
:   \ \  \\ \  \ \  \\ \  \ \  \ \  \ \    / /   \ \  \_|\ \ \  \    \ \  \ \  \ \  \ \  \____\|____|\  \
:    \ \__\\ \__\ \__\\ \__\ \__\ \__\ \__/ /     \ \_______\ \__\    \ \__\ \__\ \__\ \_______\____\_\  \
:     \|__| \|__|\|__| \|__|\|__|\|__|\|__|/       \|_______|\|__|     \|__|\|__|\|__|\|_______|\_________\
:                                                                                              \|_________|

* What is this?
This is my [[https://www.gnu.org/software/emacs/][GNU Emacs]] configuration using an org file. ~knavemacs.org~ is the
core configuration file that defines the behavior, packages, and settings used
in my custom emacs setup. While this org file is the "engine", the other
important file for my setup is the include ~config.org~ file. This file is the
"brains" so to speak. For each package configured in my knavemacs.org file,
there are variables that are being checked for to determine if that package
should actually be loaded. These variables are set in the config.org file.

The variables setup in the config.org file allow me to define different
combinations of these variables for the various devices that I use my emacs
configuration on. I call these "device profiles", which are setup as elisp
functions, which in-turn set various variables that define which packages should
be loaded on my device. I encourage you to take a look at the config.org file
to understand how it influences which parts of knavemace.org get loaded.

This brings me to how to load this config!
For your own emacs instance, you can add the following lines to your ~.emacs~
or ~.config/emacs/init.el~ file (the below is assuming that you are putting 
config.org and knavemacs.org files in the ~/.config/emacs folder):

: (require 'org)
: (require 'ob-tangle)
: (setq knavemacs/device-profile 'computer)
: (load "~/.config/emacs/config.el")
: (org-babel-load-file "~/.config/emacs/knavemacs.org")

The first two lines above initalize org and ob-tangle which will allow the
elisp blocks in knavemacs.org to be loaded as if they were part of a singluar
.emacs configuration file. The third line sets my "device profile" variable
to a specific value. This is important for the fourth line, which loads
the config.el file - this file runs a function based on the value of the
device-profile variable, and that function sets certain variables which tell
knavemacs.org which packages to load for that specific device. The actual
loading of the contents of knavemacs.org is done with the last line above.

Throughout my configuration, I may have settings that pertain to either
Windows or Linux since I use this config file across different OS types. If
there are ever any dependencies for either platform, they can be looked up
by searching for ~;; DEP:~ in this file.

Credit should be given where credit is due. Much of this config is heavily
inspired (and sometimes copied verbatim) from System Crafter's *Emacs From Scratch*
series on youtube. Definitely a must watch.

* Full Emacs Configuration
The following sections both describe and provide the elisp used to configure
various aspects of my emacs instance.

** Basic Configuration
*** Garbage Collection
I've read a lot about different ways to approach this. I'm going off a stack exchange
post that [[https://emacs.stackexchange.com/question/34342/is-there-any-downside-to-setting-gc-cons-threshold-very-high-and-collecting-ga][you can read here]] with some suggestions on how to set this. I'm using a
single command for now and we'll see how that goes.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 1024 1024 100)) ;; about 100MB
#+END_SRC

*** Basic Visual Changes
Vanilla, unconfigured emacs starts with a tool bar, scroll bar, menus, and
other visual elements at play that I disable right from the get-go.

#+BEGIN_SRC emacs-lisp 
  ;; setting some default settings to start with a minimal Emacs startup
  (setq inhibit-startup-message t) ;; no more start up message
  (setq visible-bell t)            ;; stop beeping
  (scroll-bar-mode -1)             ;; disable scroll bars
  (tool-bar-mode -1)               ;; disable tool bar
  (tooltip-mode -1)                ;; disable tooltips
  (set-fringe-mode 10)             ;; sets fringe size
  (menu-bar-mode -1)               ;; disable menu bar
#+END_SRC

*** Enable Line Numbers
I like to use line numbers on the left-hand side, and like to have relative
line numbers shown so I know how far apart various lines are from my current
cursor location.

#+BEGIN_SRC emacs-lisp
  ;; update the UI with additional basic settings
  (setq display-line-numbers-type 'relative); enable relative line numbers
  (column-number-mode)                 ; show column number in mode line
  (global-display-line-numbers-mode t) ; enable line numbers globally
  (dolist (mode '(term-mode-hook        ; define modes that we don't want to see line numbers on
		eshell-mode-hook
    dired-sidebar-mode-hook
		which-key-mode-hook))
  (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

*** Font Configuration
On my linux workspace, I like to set the font to my linking. Note that this
assumes the font is already present on the workspace.

#+BEGIN_SRC emacs-lisp
  ;; set default font settings for my favorite linux font if not on windows
  ;; DEP: requires "Inconsolata Nerd Font" installed on linux and "Hermit" installed on windows.
    (if (not(eq system-type 'windows-nt ))
        (set-face-attribute `default nil :font "Inconsolata Nerd Font" :height 120))
    (if (eq system-type 'windows-nt) (set-face-attribute `default nil :font "Hermit" :height 120))
  #+END_SRC

*** Backup File Rules
It is worth nothing that the emacs manual has a good description of backups by
copying vs renaming. Right now I am using the other mode (copy on backing up),
so that I don't start causing issues with system links, I might need to change to
the other method if it's too slow. In any case, I define a specific directory
for my backup files.

#+BEGIN_SRC emacs-lisp
  ;; set a default location for backup files, instead of the files being created
  ;; right next to the original sources
  (if (not (file-exists-p "~/.local/share/emacs-saves"))
      (make-directory "~/.local/share/emacs-saves" t))
  (setq backup-directory-alist '(("." . "~/.local/share/emacs-saves")))
  (setq make-backup-files t
	backup-by-copying t
	version-control t
	delete-old-version t
	delete-by-moving-to-trash t
	kept-old-versions 6
	kept-new-versions 6
	auto-save-default t
	auto-save-timeout 20
	auto-save-interval 200
	)
#+END_SRC

** Package Management and Setup
*** Initialize Package Sources
I use the following three sources for downloadable emacs packages:
 - elpa, the GNU ELPA package archive
 - melpa, the "big one"
 - org, to get the latest version of org-mode functionality

#+BEGIN_SRC emacs-lisp
  ;; initialize package sources
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

*** Setup of use-package
I use use-package as my main package manager for downloading and configuring
external emacs packages. I set use-package-always-ensure because I want all
packages defined in this config file to be installed automatically if not
already present on my system.

#+BEGIN_SRC emacs-lisp
  ;; SETUP: use-package
  ;; PURPOSE: for easy installation of other packages
  ;; initialize use-package on non-linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Completion, Hints, Help Framework
*** Vertico
I am moving away from Ivy to try Vertico's ecosystem of Completion Framework packages.
#+BEGIN_SRC emacs-lisp
  ;; SETUP: verico
  ;; PURPOSE: minimal completion system in the likes of helm and ivy
  (use-package vertico
    :if knavemacs/config-compframework
    :bind (:map vertico-map
                ("C-j" . vertico-next)
                ("C-k" . vertico-previous)
                ("C-f" . vertico-exit)
                :map minibuffer-local-map
                ("M-h" . backward-kill-word))
    :custom
    (vertico-cycle t)
    :init
    (vertico-mode))
#+END_SRC 

*** Savehist
Saves the most recent completion selection so the next time you show completions, recent selections
show on the top of the list.
#+BEGIN_SRC emacs-lisp
  ;; SETUP: savehist
  ;; PURPOSE: built in emacs package that works with vertico, show recent completion selections used
  (use-package savehist
    :if knavemacs/config-compframework
    :init
    (savehist-mode))
#+END_SRC

*** Marginalia
Provides extra metadata in margins of Vertico completions
#+BEGIN_SRC emacs-lisp
  ;; SETUP: marginalia
  ;; PURPOSE: provides extra metadata in margins of vertico completions
  (use-package marginalia
    :if knavemacs/config-compframework
    :after vertico
    :custom
    (marginalia-annotators '(marginalia-annotators-heavy marginalia-annotators-light nil))
    :init
    (marginalia-mode))
#+END_SRC

*** Orderless
Provides fuzzy-finding enablement to completion system searches
#+BEGIN_SRC emacs-lisp
  (use-package orderless
  :if knavemacs/config-compframework
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+END_SRC

*** Embark
Emacs Mini-Buffer Actions Rooted in Keymaps. Also provides smart actions depending on where the point is.
#+BEGIN_SRC emacs-lisp
  ;; SETUP: embark
  ;; PURPOSE: Minibuffer actions based on vertico completions
  (use-package embark
  :if knavemacs/config-compframework
  :ensure t

  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init

  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  ;; Show the Embark target at point via Eldoc.  You may adjust the Eldoc
  ;; strategy, if you want to see the documentation from multiple providers.
  (add-hook 'eldoc-documentation-functions #'embark-eldoc-first-target)
  ;; (setq eldoc-documentation-strategy #'eldoc-documentation-compose-eagerly)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+END_SRC

*** Consult
Enhanced commands utilizing the power of the completion framework packages previously loaded.
#+BEGIN_SRC emacs-lisp
  ;; SETUP: consult
  ;; PURPOSE: provides alternative, taylored commands for various search / switch functions using the current completion framework
  (use-package consult
  :if knavemacs/config-compframework
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x" . consult-mode-command)
         ("C-c h" . consult-history)
         ("C-c k" . consult-kmacro)
         ("C-c m" . consult-man)
         ("C-c i" . consult-info)
         ([remap Info-search] . consult-info)
         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ;; M-g bindings in `goto-map'
         ("M-g e" . consult-compile-error)
         ("M-g f" . consult-flymake)               ;; Alternative: consult-flycheck
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)               ;; Alternative: consult-org-heading
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-imenu-multi)
         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)
         ("M-s D" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("C-s" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e" . consult-isearch-history)         ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch
         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  :hook (completion-list-mode . consult-preview-at-point-mode)

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key "M-.")
  ;; (setq consult-preview-key '("S-<down>" "S-<up>"))
  ;; For some commands and buffer sources it is useful to configure the
  ;; :preview-key on a per-command basis using the `consult-customize' macro.
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   ;; :preview-key "M-."
   :preview-key '(:debounce 0.4 any))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; "C-+"

  ;; Optionally make narrowing help available in the minibuffer.
  ;; You may want to use `embark-prefix-help-command' or which-key instead.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; By default `consult-project-function' uses `project-root' from project.el.
  ;; Optionally configure a different project root function.
  ;;;; 1. project.el (the default)
  ;; (setq consult-project-function #'consult--default-project--function)
  ;;;; 2. vc.el (vc-root-dir)
  ;; (setq consult-project-function (lambda (_) (vc-root-dir)))
  ;;;; 3. locate-dominating-file
  ;; (setq consult-project-function (lambda (_) (locate-dominating-file "." ".git")))
  ;;;; 4. projectile.el (projectile-project-root)
  ;; (autoload 'projectile-project-root "projectile")
  ;; (setq consult-project-function (lambda (_) (projectile-project-root)))
  ;;;; 5. No project support
  ;; (setq consult-project-function nil)
)
#+END_SRC 

*** Embark-Consult
Provides a connection point between embark and consult.
#+BEGIN_SRC emacs-lisp
  (use-package embark-consult
    :if knavemacs/config-compframework
  )
#+END_SRC

*** Which-key
#+BEGIN_SRC emacs-lisp
  ;; SETUP: which-key
  ;; PURPOSE: provides assistance in showing what key permutations/options exist while entering commands
  (use-package which-key
    :if knavemacs/config-keyhelp
    :init (which-key-mode)
    :diminish
    :config
    (setq which-key-idle-delay 0.9))
#+END_SRC

** File Management Configuration
*** Dired
Some modifications to dired to support my usage of the functionality
#+BEGIN_SRC emacs-lisp
  (defun knavemacs/dired-mode-setup ()
    (dired-hide-details-mode))

  (use-package dired
    :if knavemacs/config-dired
    :hook (dired-mode . knavemacs/dired-mode-setup)
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-alGh --group-directories-first"))
    )
#+END_SRC

*** Dired-Single
Prevents a bunch of dired buffers from accumulating in the buffer list
#+BEGIN_SRC emacs-lisp
  ;; SETUP: dired-single
  ;; PURPOSE: prevents a bunch of dired buffers from accumulating in the buffer list
  (use-package dired-single
    :if knavemacs/config-dired
  )
#+END_SRC

*** Dired-Hide-Dotfiles
The name says it all.
#+BEGIN_SRC emacs-lisp
  (use-package dired-hide-dotfiles
    :if knavemacs/config-dired
    :hook (dired-mode . dired-hide-dotfiles-mode))
#+END_SRC

*** Dired-Subtree
The name says it all.
#+BEGIN_SRC emacs-lisp
  (use-package dired-subtree
    :if knavemacs/config-dired
  )
#+END_SRC

** Org-Mode Configuration
*** Org (general config)
#+BEGIN_SRC emacs-lisp
  ;; PURPOSE: this manages my getting things done workflow during work
  (defun knavemacs/org-mode-setup ()
    (org-indent-mode))

  (use-package org
    :if knavemacs/config-org
    :hook (org-mode . knavemacs/org-mode-setup)
    :config
    (setf (cdr (rassoc 'find-file-other-window org-link-frame-setup)) 'find-file) ; open links in same buffer
    (setq org-ellipsis " ▾"
          ;org-hide-emphasis-markers t
    )
    (setq org-agenda-files (list "~/.org"))
    (setq org-refile-targets
          '((nil :maxlevel . 1)
            (org-agenda-files :maxlevel . 2)))
    (setq org-todo-keywords
          '((sequence "TASK(k)" "TODO(t)" "NEXT(x)" "WAIT(w@/!)" "GAVE(v@/!)" "MEET(m@/!)" "|" "DONE(d!)" "CANCELED(c)")
            (sequence "NOTICE(n)" "|" "RESOLVED(r@)")
            ))
    (setq org-todo-keywoard-faces
          '(("TODO" . org-warning) ("NEXT" . "green") ("WAIT" . "yellow") ("GAVE" . "orange") ("MEET" . "yellow")
            ("DONE" . "blue") ("CANCELED" . "purple")))

    ;; custom agenda views
    (setq org-agenda-custom-commands
          '(("d" "Work-Week Dashboard"
             (
              (todo "NOTICE" ((org-agenda-overriding-header "Notices for Today")))
              (agenda "" ((org-deadline-warning-days 7)))
              (todo "TASK" ((org-agenda-overriding-header "Additional Tasks Today")))
              (tags-todo "+unfiled" ((org-agenda-overriding-header "Unfiled TODOs")))
              (todo "WAIT"
                    ((org-agenda-overriding-header "Waiting on Confirmation")))
              (todo "GAVE"
                    ((org-agenda-overriding-header "TODOs Delegated to Someone Else")))))))

    ;; capture templates
    (setq org-capture-templates
          '(
            ("n" "Post Notice" entry (file+olp "~/.org/notice.org" "Notice")
             "* NOTICE %?\n%U Notice Created" :empty-lines 1)

            ("k" "New Task Today" entry (file+olp "~/.org/unfiled.org" "Tasks")
             "* TASK %?\n %i" :empty-lines 1)

            ("t" "New Todo" entry (file+olp "~/.org/unfiled.org" "Todos")
             "* TODO %? :unfiled:\n %i" :empty-lines 1)

            ("m" "Meeting Notes" entry (file+olp "~/.org/unfiled.org" "Meetings")
             "* %t %? :unfiled:\n %i" :empty-lines 1)

            ("w" "Start Work Cycle" entry (file+olp+datetree "~/.org/worklog.org" "Work Log")
             "* %? :WorkNew:\n%U Work Cycle Created\n%i" :empty-lines 1)
            ))
    )
#+END_SRC

*** Org Bullets
#+BEGIN_SRC emacs-lisp
  ;; SETUP: org-bullets
  ;; PURPOSE: nicer bullets when working in org files
  (use-package org-bullets
    :if knavemacs/config-org
    :after org
    :hook (org-mode . org-bullets-mode))
#+END_SRC

*** Pretty Hyphens
This is done to transform dash hyphens into dots.
#+BEGIN_SRC emacs-lisp
  ;; make hyphens dots
  ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
			    '(("^ *\\([-]\\) "
			       (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
#+END_SRC

** Note-Taking Configuration
*** Markdown Mode
I specify Markdown mode here, because I usually use markdown to take notes
#+BEGIN_SRC emacs-lisp
  ;; SETUP: markdown-mode
  ;; PURPOSE: to provide emacs facilities to edit and create md files
  (use-package markdown-mode
    :if knavemacs/config-notes
  )
#+END_SRC

*** Denote
Using denote for note taking and knowledge management
#+BEGIN_SRC emacs-lisp
  ;; SETUP: denote
  ;; PURPOSE: provides facilities for note taking and knowledge management
  (use-package denote
    :if knavemacs/config-notes
    :init
    (add-hook 'find-file-hook #'denote-link-buttonize-buffer)
    :config
    (setq denote-directory (expand-file-name "~/Documents/knowledge"))
    (setq denote-prompts '(subdirectory title keywords))
    (setq denote-known-keywords '("info" "idea" "meta" "index" "refined"))
    (setq denote-file-type "markdown-yaml")

    (defun denote-subdirectory-with-type ()
      "Create a note of a specific type, in a specific subdirectory"
      (declare (interactive-only t))
      (interactive)
      (let ((denote-prompts '(file-type subdirectory title keywords)))
        (call-interactively #'denote)))

    (defun denote-journal-entry ()
      "Create an entry tagged 'journal' with the date as its title.
      If a journal for the current day exists, visit it.  If multiple
      entries exist, prompt with completion for a choice between them.
      Else create a new file."
      (interactive)
      (let* ((today (format-time-string "%A %e %B %Y"))
        (string (denote-sluggify today))
        (files (denote-directory-files-matching-regexp string)))
      (cond
        ((> (length files) 1)
        (find-file (completing-read "Select file: " files nil :require-match)))
      (files
        (find-file (car files)))
      (t
        (denote
          today
          '("journal")
          'org
          "~/Documents/knowledge/journal")))))
    )
#+END_SRC

*** Capturing Bibliography Notes
The following are a set of elips functions that were written by *Mohamed Suliman* that provide
a facility using org-capture to capture a literature/bibliography note from a Bibtext entry.
The description of this workflow can be found [[https://www.scss.tcd.ie/~sulimanm/posts/denote-bibliography.html][at his blog post]]. His general workflow is as follows:
- I come across an interesting paper online that I’d like to save to my bibliography.
- After copying its BiBTeX entry from the webpage to the clipboard, I switch to emacs.
- I then open up an org-capture template that asks for the BibTeX (which I paste in), a title (defaults to the title of the entry), and some tags.
- A capture window opens with a Denote note that has the inserted BiBTeX enclosed in an org source block.
- I then write any notes I may have (if any) and close the capture window with C-c C-c.
#+BEGIN_SRC emacs-lisp
  (defun namilus-denote-org-capture-biblio ()
  "Ask the user for a bibtex entry, title, and keywords, and creates a denote note template with:

1. The bibtex included inside an org bibtex source block.

2. The keyword \"biblio\" and the bibtex entry's sanitised key as
part of the denote file's tags. If the bibtex entry entered by
the user is empty or doesn't match the regexp, only the
\"biblio\" keyword is added, along with whatever other keywords
entered by the user."
  (let* ((bibtex (namilus-denote-bibtex-prompt))
         (title (denote-title-prompt (namilus-denote-bibtex-title bibtex)))
         (keywords (append (denote-keywords-prompt) (namilus-denote-biblio-keywords bibtex)))
         (front-matter (denote--format-front-matter
                        title (denote--date nil 'org) keywords
                        (format-time-string denote-id-format nil) 'org)))
    (setq denote-last-path
          (denote--path title keywords
                        (file-name-as-directory (concat denote-directory "/zettelkasten"))
                        (format-time-string denote-id-format) 'org))
    (denote--keywords-add-to-history keywords)
    (concat front-matter (namilus-denote-bibtex-org-block bibtex))))


(defun namilus-denote-bibtex-prompt (&optional default-bibtex)
  "Ask the user for a bibtex entry. Returns the sanitised
version. See `namilus-denote-sanitise-bibtex' for details."
  (let* ((def default-bibtex)
         (format (if (and def (not (string-empty-p def)))
                     (format "Bibtex [%s]: " def)
                   "Bibtex: "))
         (sanitised-bibtex (namilus-denote-sanitise-bibtex (read-string format nil nil def))))
    (if sanitised-bibtex
        sanitised-bibtex
      (error "Invalid BiBTeX"))))


(defun namilus-denote-sanitise-bibtex (bibtex)
  "Returns a santised version of BIBTEX. Sanitisation entails remove
all non alpha-numeric characters from the bibtex key, and
 returning this updated bibtex entry. If BIBTEX is not a valid
 bibtex entry, returns nil."
  (when (string-match "@.*{\\(.*\\)," bibtex)
    (let* ((key (match-string-no-properties 1 bibtex))
           (sanitised-key (replace-regexp-in-string "[^A-Za-z0-9]" "" key)))
      (replace-regexp-in-string key sanitised-key bibtex))))

(defun namilus-denote-bibtex-key (bibtex)
  "Returns the bibtex key from BIBTEX."
  (when (string-match "@.*{\\(.*\\)," bibtex)
    (match-string-no-properties 1 bibtex)))

(defun namilus-denote-bibtex-title (bibtex)
  "Returns the bibtex title from BIBTEX."
  (when (string-match "\\s *title\\s *=\\s *{\\(.*\\)}," bibtex)
    (match-string-no-properties 1 bibtex)))


(defun namilus-denote-biblio-keywords (bibtex)
  "Returns a list of strings \"biblio\" and the key from the BIBTEX
entry, otherwise, just returns a list consisting of the string
 \"biblio\"."
  (let ((bibtex-key (namilus-denote-bibtex-key bibtex)))
    (if bibtex-key
        `("biblio" ,bibtex-key)
      '("biblio"))))

(defun namilus-denote-bibtex-org-block (bibtex)
  "Returns a string representing an org `bibtex' source block
encompassing BIBTEX, a string of a bibtex entry."
  (concat "#+begin_src bibtex\n" bibtex "\n#+end_src"))

(add-to-list 'org-capture-templates
             '("B" "Bibliography (with Denote) BibTeX" plain
               (file denote-last-path)
                      #'namilus-denote-org-capture-biblio
                      :no-save t
                      :immediate-finish nil
                      :kill-buffer t
                      :jump-to-captured nil))
#+END_SRC

*** Exporting Bibliography Note Citations
Similarly to the prior section, Mohamed also provides a set of functions that
allow you to [[https://www.scss.tcd.ie/~sulimanm/posts/denote-bibliography.html][export bibtext entries from notes]].

#+BEGIN_SRC emacs-lisp
  (defun namilus-denote-biblio-read-bibtex (file)
    "Reads the bibtex entry from a given Denote FILE. Does so by
  searching for a org bibtex source block and returns the contents
  therein."
    (with-temp-buffer
      (insert-file-contents file)
      (let ((contents (buffer-string)))
        (when (string-match "#\\+begin_src.*bibtex\\(\\(.*\n\\)*\\)#\\+end_src" contents)
          (match-string-no-properties 1 contents)))))


  (defun namilus-denote-generate-bibliography (denote-biblio-files bibliography-file)
    "Writes the org bibtex source blocks located in each of
  DENOTE-BIBLIO-FILES to BIBLIOGRAPHY-FILE."
    (with-temp-file bibliography-file
      (dolist (file denote-biblio-files)
        (let ((bibtex (namilus-denote-biblio-read-bibtex file)))
          (if bibtex
              (insert bibtex))))))

(defun namilus-denote-bibliography-file-prompt (&optional default-bibliography-file)
  "Ask the user for a bibliography file."
  (let* ((def default-bibliography-file)
         (format (if (and def (not (string-empty-p def)))
                     (format "Bibliography file [%s]: " def)
                   "Bibliography file: ")))
    (expand-file-name (read-file-name format nil def))))


(defun namilus-denote-dired-generate-bibliography-from-marked ()
  (interactive)
  (namilus-denote-generate-bibliography (dired-get-marked-files)
                                        (namilus-denote-bibliography-file-prompt)))
#+END_SRC

** Visual Theme and Aesthetic
*** Color Theme
#+BEGIN_SRC emacs-lisp
  (use-package modus-themes
  :config
  ;; block regions
  (setq modus-themes-region '(bg-only))

  ;; palette overrides to define colors
  (setq modus-themes-common-palette-overrides
	`(
	  ;; mode line updates to border
	  (border-mode-line-active bg-cyan-subtle)
	  (border-mode-line-inactive bg-mode-line-inactive)

	  ;; block regions
	  (bg-region bg-ochre)
	  (fg-region unspecified)
	  
	  ;; parenthesis overrides
	  (bg-paren-match bg-magenta-intense)

	  ;; tab bar mode
	  (bg-tab-bar bg-main)
	  (bg-tab-current bg-cyan-intense)
	  (bg-tab-other bg-inactive)

	  ;; expand with sensible defaults using this preset
	  ,@modus-themes-preset-overrides-warmer))
  
  ;; completions
  (setq modus-themes-completions
	'((matches . (extrabold))
	  (selection . (semibold italic text-also))))

  ;; org-mode
  (setq modus-themes-headings
	'((1 . (1.4))
	  (2 . (1.3))
	  (3 . (extrabold))
	  (t . (semilight 1.1))))
  (setq modus-themes-scale-headings t)
  (setq modus-themes-org-blocks 'gray-background)
  
  ;; activate theme
  (load-theme 'modus-vivendi t))
#+END_SRC

*** Modeline
#+BEGIN_SRC emacs-lisp
  ;; No packages here, custom mode-line configuration
  ;; Start with the faces for the meow mode indicator
(defface knavemacs/meow-face-indicator-normal
  '((t :foreground "SlateGrey4"
       :background "SteelBlue4"
       :weight bold
       ))
  "Face for Normal Mode"
  :group 'knavemacs/mode-line-faces)

(defface knavemacs/meow-face-indicator-insert
  '((t :foreground "gray"
       :background "SeaGreen"
       :weight bold
       ))
  "Face for Insert Mode"
  :group 'knavemacs/mode-line-faces)

(defface knavemacs/meow-face-indicator-keypad
  '((t :foreground "gray"
       :background "PaleVioletRed"
       :weight bold
       ))
  "Face for keypad Mode"
  :group 'knavemacs/mode-line-faces)

(defface knavemacs/meow-face-indicator-motion
  '((t :foreground "gray"
       :background "thistle"
       :weight bold
       ))
  "Face for motion Mode"
  :group 'knavemacs/mode-line-faces)

(defface knavemacs/meow-face-indicator-beacon
  '((t :foreground "gray"
       :background "firebrick3"
       :weight bold
       ))
  "Face for beacon Mode"
  :group 'knavemacs/mode-line-faces)

(defun knavemacs/meow-mode-line-face ()
  (cond (meow-normal-mode 'knavemacs/meow-face-indicator-normal)
	(meow-insert-mode 'knavemacs/meow-face-indicator-insert)
	(meow-motion-mode 'knavemacs/meow-face-indicator-motion)
	(meow-keypad-mode 'knavemacs/meow-face-indicator-keypad)
	(meow-beacon-mode 'knavemacs/meow-face-indicator-beacon)))

;; write a function to do the alignment of the mode-line
(defun simple-mode-line-render (left right)
  "Return a string of `window-width' length containing LEFT, and RIGHT
 aligned respectively."
  (let* ((available-width (- (window-width) (length left) 2)))
    (format (format " %%s %%%ds " available-width) left right)))

;; construct the mode-line
(setq-default mode-line-format
      '((:eval (simple-mode-line-render
                ;; left
                (format-mode-line
		 (list
		  '(:eval
		    (propertize (meow-indicator) 'face (knavemacs/meow-mode-line-face)))
		  mode-line-front-space
		  mode-line-mule-info
		  mode-line-modified
		  '(:eval
		    (propertize " %b " 'help-echo (buffer-file-name)))))
                ;; right
                (concat
		 (format-mode-line
		  (list
		   mode-line-misc-info
		   " %m %l:%c "))
		 "[%p]" ; concatenated on, format-mode-line was doing wierd things
			)))))
#+END_SRC

*** all-the-icons
#+BEGIN_SRC emacs-lisp
  ;; SETUP: all-the-icons
  ;; PURPOSE: provide nerdfont-like icons for graphical elements (like doom-modeline)
  ;; DEP: must run all-the-icons-install-fonts to install the fonts to the local system.
  ;;       on Windows, double-click each downloaded font file and click install.
  ;;       The below use-package form should automatically 
  (use-package all-the-icons
    :if knavemacs/config-visual-icons
    :commands all-the-icons-install-fonts
    :init
    (unless (find-font (font-spec :name "all-the-icons"))
      (all-the-icons-install-fonts t)))
#+END_SRC

*** all-the-icons-dired
#+BEGIN_SRC emacs-lisp
  ;; SETUP: all-the-icons-dired
  ;; PURPOSE: provides nerdfont-like icons specifically for dired buffers
  (use-package all-the-icons-dired
    :if knavemacs/config-visual-icons
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC

*** Rainbow Delimiters
#+BEGIN_SRC emacs-lisp
  ;; SETUP: rainbow-delimiters
  ;; PURPOSE: make apparent the nested parenthesis in program code like Elisp
  (use-package rainbow-delimiters
    :if knavemacs/config-visual
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Rainbow Mode
#+BEGIN_SRC emacs-lisp
  ;; SETUP: rainbow-mode
  ;; PURPOSE: provide color highlighting for rgb/hex codes in the buffer
  (use-package rainbow-mode
    :if knavemacs/config-visual
  )
#+END_SRC

** Project and Version Control
*** Projectile
A nice thing about projectile is I can set directory (project) specific variables, including what
command runs when I "run" the project. Note that having ripgrep installed makes seach pretty
excellent across project files.

#+BEGIN_SRC emacs-lisp
  ;; SETUP: projectile
  ;; PURPOSE: project discrovey system and framework for emacs
  ;; DEP: having ripgrep installed will allow me to search better in projects
  (use-package projectile
    :if knavemacs/config-project
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :init
    (when (file-directory-p "~/Projects")
      (setq projectile-project-search-path '("~/Projects")))
    )

  ;; SETUP: counsel-projectile
  ;; PURPOSE: counsel UI and further IVY integration to projectile
  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+END_SRC

*** Magit
#+BEGIN_SRC emacs-lisp
  ;; SETUP: magit
  ;; PURPOSE: git interface with emacs
  ;; DEP: I need to set the path manually to git for windows
  (use-package magit
    :if knavemacs/config-project
    :init
    (if (eq system-type 'windows-nt) (setq exec-path (append exec-path '("C:/Users/josinski/auxiliary/other/lsys/cmder/vendor/git-for-windows/bin"))))
    )
#+END_SRC

** Custom Functions
*** Navigation Functions
*forward-or-backward-sexp*
Grabbed from the Emacs Wiki, here is a custom function that 'smartly' emulates
the '%' key from vi, to allow jumping between matching parenthesis (or sexp).

#+BEGIN_SRC emacs-lisp
  (defun forward-or-backward-sexp (&optional arg)
  "Go to the matching parenthesis character if one is adjacent to point."
  (interactive "^p")
  (cond ((looking-at "\\s(") (forward-sexp arg))
        ((looking-back "\\s)" 1) (backward-sexp arg))
        ;; Now, try to succeed from inside of a bracket
        ((looking-at "\\s)") (forward-char) (backward-sexp arg))
        ((looking-back "\\s(" 1) (backward-char) (forward-sexp arg))))
#+END_SRC

*** Date Functions
*org-quick-time-stamp-inactive*
Provides a single function that can be mapped to a key, as a shortcut to insert
an inactive timestamp of the current time without user prompt.

#+BEGIN_SRC emacs-lisp
  (defun org-quick-time-stamp-inactive ()
  "Insert an inactive time stamp of the current time without user prompt"
  (interactive)
  (let ((current-prefix-arg '(16)))
    (call-interactively 'org-time-stamp-inactive)))
#+END_SRC

** Key-Bind Modifications
*** Meow
I use [[https://github.com/meow-edit/meow][meow]] as my modal editing system, and it is amazing!
I use ~<~ and ~>~ to navigate up and down screenfulls of text,
as well as ~N~ and ~M~ to go to the true beginning / end of a line. I can use
~SPC-?~ to get a good cheatsheet of what meow keys exist. I can always use
~C-h k~ as well to check a specific key, or launch ~meow-tutor~ for a refresher.
Take a look below, because I also change the purpose of the digit keys and add
a few more functions when pressing the leader key!
#+BEGIN_SRC emacs-lisp
  ;; SETUP: meow
  ;; PURPOSE: more native modal editing mode for Emacs
  (use-package meow
    :if knavemacs/config-keybinds
    :diminish
    :config
  (defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("M-h" . windmove-left) ;; consistent window movement in special modes
     '("M-j" . windmove-down) ;; consistent window movement in special modes
     '("M-k" . windmove-up) ;; consistent window movement in special modes
     '("M-l" . windmove-right) ;; consistent window movement in special modes
     '("<escape>" . ignore))
    (meow-leader-define-key
     ;; SPC j/k will run the original command in MOTION state.
     '("j" . "H-j")
     '("k" . "H-k")
     ;; Use SPC (0-9) for digit arguments.
     '("1" . tab-bar-close-tab)
     '("2" . tab-bar-new-tab)
     '("3" . switch-to-buffer-other-tab)
     ;'("4" . meow-digit-argument)
     '("5" . forward-or-backward-sexp)
     ;'("6" . meow-digit-argument)
     ;'("7" . meow-digit-argument)
     '("b" . consult-buffer)
     '("9" . tab-bar-switch-to-prev-tab)
     '("0" . tab-bar-switch-to-next-tab)
     '("k" . kill-this-buffer)
     '("f" . org-open-at-point)
     '("o" . org-capture)
     '("r" . rectangle-mark-mode)
     '("w" . hydra-window-management/body)
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("C-0" . meow-expand-0)
     '("C-9" . meow-expand-9)
     '("C-8" . meow-expand-8)
     '("C-7" . meow-expand-7)
     '("C-6" . meow-expand-6)
     '("C-5" . meow-expand-5)
     '("C-4" . meow-expand-4)
     '("C-3" . meow-expand-3)
     '("C-2" . meow-expand-2)
     '("C-1" . meow-expand-1)
     '("M-h" . windmove-left) ;; normal mode mapping only
     '("M-j" . windmove-down) ;; normal mode mapping only
     '("M-k" . windmove-up) ;; normal mode mapping only
     '("M-l" . windmove-right) ;; normal mode mapping only
     '("1" . meow-digit-argument)
     '("2" . meow-digit-argument)
     '("3" . meow-digit-argument)
     '("4" . meow-digit-argument)
     '("5" . meow-digit-argument)
     '("6" . meow-digit-argument)
     '("7" . meow-digit-argument)
     '("8" . meow-digit-argument)
     '("9" . meow-digit-argument)
     '("0" . meow-digit-argument)
     '("-" . negative-argument)
     '(";" . meow-reverse)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("a" . meow-append)
     '("A" . meow-open-below)
     '("b" . meow-back-word)
     '("B" . meow-back-symbol)
     '("c" . meow-change)
     '("d" . meow-delete)
     '("D" . meow-backward-delete)
     '("e" . meow-next-word)
     '("E" . meow-next-symbol)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("G" . meow-grab)
     '("h" . meow-left)
     '("H" . meow-left-expand)
     '("i" . meow-insert)
     '("I" . meow-open-above)
     '("j" . meow-next)
     '("J" . meow-next-expand)
     '("k" . meow-prev)
     '("K" . meow-prev-expand)
     '("l" . meow-right)
     '("L" . meow-right-expand)
     '("m" . meow-join)
     '("n" . meow-search)
     '("o" . meow-block)
     '("O" . meow-to-block)
     '("p" . meow-yank)
     '("q" . meow-quit)
     '("Q" . meow-goto-line)
     '("r" . meow-replace)
     '("R" . meow-swap-grab)
     '("s" . meow-kill)
     '("S" . markdown-toggle-markup-hiding)
     '("t" . meow-till)
     '("u" . meow-undo)
     '("U" . meow-undo-in-selection)
     '("v" . meow-visit)
     '("w" . meow-mark-word)
     '("W" . meow-mark-symbol)
     '("x" . meow-line)
     '("X" . meow-goto-line)
     '("y" . meow-save)
     '("Y" . meow-sync-grab)
     '("z" . hydra-shift-viewport/body)
     '("Z" . hydra-save-andor-close/body)
     '("'" . repeat)
     '("<escape>" . ignore)
     ;; deviating from the suggested map to allow easy scrolling of screens
     ;; as well as getting to true beginning / ends of lines
     '("<" . scroll-down-command)
     '(">" . scroll-up-command)
     '("-" . move-beginning-of-line)
     '("=" . move-end-of-line)
     '("_" . text-scale-decrease)
     '("+" . text-scale-increase)
     ))

  (meow-setup)
  (meow-global-mode 1)
    )
#+END_SRC

*** Hydra
#+BEGIN_SRC emacs-lisp
  ;; SETUP: hydra
  ;; PURPOSE: tie related/successive commands together to provide family modes of key bindings
  (use-package hydra
    :if knavemacs/config-keybinds
  )
  (defhydra hydra-text-scale (:timeout 4)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))
  (defhydra hydra-window-resize (:timeout 4)
    "resize split windows"
    ("j" enlarge-window "inc-height")
    ("k" shrink-window "dec-height")
    ("h" shrink-window-horizontally "dec-width")
    ("l" enlarge-window-horizontally "inc-width")
    ("f" nil "finished" :ext t))
  (defhydra hydra-shift-viewport (:timeout 4)
    "shift view around, or pop, selection"
    ("z" recenter "recenter" :exit t)
    ("t" (recenter-top-bottom 0) "shift to top" :exit t)
    ("b" (recenter-top-bottom -1) "shift to bottom" :exit t)
    ("g" meow-pop-selection "Pop Selection")
    ("f" nil "finished" :ext t))
  (defhydra hydra-save-andor-close (:timeout 4)
    "Quick kill emacs, optionally save all"
    ("Z" (save-buffers-kill-terminal) "Save Close All")
    ("Q" (kill-emacs) "Kill Emacs")
    ("f" nil "cancel" :ext t))
  (defhydra hydra-window-management (:timeout 10)
    "Linked keys to move and manage window splits"
    ("J" windmove-down "move down once" :exit t)
    ("K" windmove-up "move up once" :exit t)
    ("H" windmove-left "move left once" :exit t)
    ("L" windmove-right "move right once" :exit t)
    ("j" windmove-down "move down")
    ("k" windmove-up "move up")
    ("h" windmove-left "move left")
    ("l" windmove-right "move right")
    ("f" nil "finished" :ext t)
    ("9" shrink-window-horizontally "shrink horizontal")
    ("0" enlarge-window-horizontally "grow horizontal")
    ("-" shrink-window "shrink window")
    ("=" enlarge-window "grow window"))
#+END_SRC

*** General
I use general to setup some additional keybinds based on a global leader. Like my own keypad versus
the space key used for meow.
#+BEGIN_SRC emacs-lisp
  ;; SETUP: general
  ;; PURPOSE: provide convenient and consistent keymap definitions, including with leader keys
  (use-package general
    :if knavemacs/config-keybinds
    :config
    ;; General global key remaps
    (general-define-key
     "C-x C-b" 'ibuffer) ; remap buffer list to interactive list 

    ;; Personal prompt keys
    (general-create-definer knavemacs/leader-keys
                            :keymaps 'global
                            :prefix "C-c p")
    (knavemacs/leader-keys
     "p"  '(projectile-command-map :which-key "projectile")
     "g"  '(magit-status :which-key "git status")

     "n"  '(:ignore t :which-key "denote")
     "nn" '(denote :which-key "Create Note")
     "nN" '(denote-subdirectory-with-type :whick-key "Create Specific Note Type")
     "ni" '(denote-link :which-key "Create Note Link")
     "nI" '(denote-link-add-links :which-key "Create Multiple Links")
     "nb" '(denote-link-backlinks :which-key "Show Backlinks")
     "nl" '(denote-link-after-creating :which-key "Create & Link New Note")
     "nr" '(denote-rename-file :which-key "Rename File")
     "nR" '(denote-rename-file-using-front-matter :which-key "Rename Per Front Matter")
     "nj" '(denote-journal-entry :which-key "Create Journal Entry")

     "o"  '(:ignore t :which-key "org-mode")
     "oa" '(org-agenda :which-key "org-agenda")
     "oc" '(org-capture :which-key "org-capture")
     "ol" '(org-store-link :which-key "org-store-link")
     "od" '(org-quick-time-stamp-inactive :which-key "inactive timestamp")

     "s"  '(:ignore t :which-key "scale/size")
     "st" '(hydra-text-scale/body :which-key "scale text")
     "sw" '(hydra-window-resize/body :which-key "resize window"))

    ;; dired configurations
    ;; note, <space>-j to jump (dired-goto-file) in dired buffers
    ;; note, <space>-j to open current buffer location in dired for other buffers
    ;; note, o to open file in a different buffer split for editing (vs Enter)
    ;; note, C-o to open file in a differnet buffer split, keep focus on dired
    (general-define-key
     :keymaps 'dired-mode-map
     "h" 'dired-single-up-directory
     "l" 'dired-single-buffer
     "K" 'dired-do-kill-lines
     "H" 'dired-hide-dotfiles-mode
     ";" 'dired-subtree-toggle
     )

     )
#+END_SRC

